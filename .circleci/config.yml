# FIXME: We may need to return all original jobs and workflows from the lotus config
# when Eudico/Spacenet is stable and ready for production.
# For now this config contains only Spacenet related items.

version: 2.1
orbs:
  aws-cli: circleci/aws-cli@1.3.2

executors:
  golang:
    docker:
      - image: cimg/go:1.19.7
    resource_class: 2xlarge
  ubuntu:
    docker:
      - image: ubuntu:20.04

commands:
  prepare:
    parameters:
      linux:
        default: true
        description: is a linux build environment?
        type: boolean
      darwin:
        default: false
        description: is a darwin build environment?
        type: boolean
    steps:
      - checkout
      - git_fetch_all_tags
      - run: git submodule sync
      - run: git submodule update --init
      - when:
          condition: << parameters.linux >>
          steps:
            - run: sudo DEBIAN_FRONTEND=noninteractive apt-get update
            - run: sudo DEBIAN_FRONTEND=noninteractive apt-get install ocl-icd-opencl-dev libhwloc-dev
  download-params:
    steps:
      - restore_cache:
          name: Restore parameters cache
          keys: 'v26-2k-lotus-params'
          paths:
            - /var/tmp/filecoin-proof-parameters/
      - run:  ./lotus fetch-params 2048
      - save_cache:
          name: Save parameters cache
          key: 'v26-2k-lotus-params'
          paths:
            - /var/tmp/filecoin-proof-parameters/
  install_ipfs:
    steps:
      - run: |
          apt update
          apt install -y wget
          wget https://github.com/ipfs/go-ipfs/releases/download/v0.12.2/go-ipfs_v0.12.2_linux-amd64.tar.gz
          wget https://github.com/ipfs/go-ipfs/releases/download/v0.12.2/go-ipfs_v0.12.2_linux-amd64.tar.gz.sha512
          if [ "$(sha512sum go-ipfs_v0.12.2_linux-amd64.tar.gz)" != "$(cat go-ipfs_v0.12.2_linux-amd64.tar.gz.sha512)" ]
          then
            echo "ipfs failed checksum check"
            exit 1
          fi
          tar -xf go-ipfs_v0.12.2_linux-amd64.tar.gz
          mv go-ipfs/ipfs /usr/local/bin/ipfs
          chmod +x /usr/local/bin/ipfs
  git_fetch_all_tags:
    steps:
      - run:
          name: fetch all tags
          command: |
            git fetch --all

jobs:
  mod-tidy-check:
    executor: golang
    steps:
      - prepare
      - run: go mod tidy -v
      - run:
          name: Check git diff
          command: |
            git --no-pager diff go.mod go.sum
            git --no-pager diff --quiet go.mod go.sum
  build-all:
    executor: golang
    steps:
      - prepare
      - run: sudo apt-get update
      - run: sudo apt-get install npm
      - run:
          command: make buildall
      - run:
          name: check tag and version output match
          command: ./scripts/version-check.sh ./lotus
      - store_artifacts:
          path: lotus
      - store_artifacts:
          path: lotus-miner
      - store_artifacts:
          path: lotus-worker
      - run: mkdir linux && mv lotus lotus-miner lotus-worker linux/
      - persist_to_workspace:
          root: "."
          paths:
            - linux
  build-spacenet:
    executor: golang
    steps:
      - prepare
      - run:
          command: make spacenet
  build-linux-spacenet:
    description: build spacenet on Linux VM
    machine:
      image: ubuntu-2204:2023.02.1
    steps:
      - prepare:
          linux: true
          darwin: false
      - run: go version
      - run:
          name: Install Rust
          command: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y
      - restore_cache:
          name: restore cache
          keys:
            - linux-v3-go-deps-{{ arch }}-{{ checksum "go.sum" }}
      - run:
          command: make deps lotus
          no_output_timeout: 30m
      - run:
          command: make spacenet
          no_output_timeout: 10m
      - save_cache:
          name: save cache
          key: linux-v3-go-deps-{{ arch }}-{{ checksum "go.sum" }}
          paths:
            - "~/.rustup"
            - "~/.cargo"
            - ~/.go_workspace/pkg/mod
            - ~/.cache/go-build
  build-macos-spacenet:
    description: build spacenet on macos
    macos:
      xcode: "14.2.0"
    working_directory: ~/go/src/github.com/filecoin-project/lotus
    steps:
      - prepare:
          linux: false
          darwin: true
      - run:
          name: Install go
          command: |
            curl -O https://dl.google.com/go/go1.19.7.darwin-amd64.pkg && \
            sudo installer -pkg go1.19.7.darwin-amd64.pkg -target /
      - run:
          name: Export Go
          command: |
            echo 'export PATH="$PATH:/usr/local/go/bin"' >> "$BASH_ENV"
            echo 'export GOPATH="${HOME}/go"' >> $BASH_ENV
            echo 'export PATH="$GOPATH"/bin:"$PATH"' >> "$BASH_ENV"
      - run: go version
      - run:
          name: Install dependencies with Homebrew
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install pkg-config coreutils jq hwloc
      - run:
          name: Install Rust
          command: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y
      - restore_cache:
          name: restore cache
          keys:
            - macos-v3-go-deps-{{ arch }}-{{ checksum "~/go/src/github.com/filecoin-project/lotus/go.sum" }}
      - run:
          command: make spacenet
          no_output_timeout: 10m
      - save_cache:
          name: save cache
          key: macos-v3-go-deps-{{ arch }}-{{ checksum "~/go/src/github.com/filecoin-project/lotus/go.sum" }}
          paths:
            - "~/.rustup"
            - "~/.cargo"
            - ~/go/pkg/mod
            - ~/Library/Caches/go-build

  test: &basic_test
    description: |
      Run tests with gotestsum.
    parameters: &test-params
      executor:
        type: executor
        default: golang
      go-test-flags:
        type: string
        default: "-tags=spacenet -shuffle=on -v -count=1"
        description: Flags passed to go test.
      target:
        type: string
        default: "./..."
        description: Import paths of packages to be tested.
      proofs-log-test:
        type: string
        default: "0"
      suite:
        type: string
        default: unit
        description: Test suite name to report to CircleCI.
      gotestsum-format:
        type: string
        default: standard-verbose
        description: gotestsum format. https://github.com/gotestyourself/gotestsum#format
      coverage:
        type: string
        default: "-coverprofile=/tmp/conformance.out -coverpkg ./chain/consensus/...,./chain/ipcagent/...,./chain/eudico-core/..."
        description: Coverage flag. Set to the empty string to disable.
    executor: << parameters.executor >>
    steps:
      - prepare
      - restore_cache:
          name: restore cache
          keys:
            - test-v3-go-deps-{{ arch }}-{{ checksum "go.sum" }}
      - run:
          command: make deps lotus
          no_output_timeout: 30m
      - run:
          command: make spacenet
          no_output_timeout: 10m
      - save_cache:
          name: save cache
          key: test-v3-go-deps-{{ arch }}-{{ checksum "go.sum" }}
          paths:
            - ~/go/pkg/mod
            - ~/.cache/go-build
      - download-params
      - run:
          name: go test
          environment:
            TEST_RUSTPROOFS_LOGS: << parameters.proofs-log-test >>
            MIR_INTERCEPTOR_OUTPUT: "mir-interceptor"
            GOLOG_LOG_LEVEL: "info,mir-consensus=info,mir-manager=info"
          command: |
            mkdir -p /tmp/test-reports/<< parameters.suite >>
            mkdir -p /tmp/test-artifacts
            gotestsum \
              --format << parameters.gotestsum-format >> \
              --junitfile /tmp/test-reports/<< parameters.suite >>/junit.xml \
              --jsonfile /tmp/test-artifacts/<< parameters.suite >>.json \
              -- \
              << parameters.coverage >> \
              << parameters.go-test-flags >> \
              << parameters.target >>
            go tool cover -html=/tmp/conformance.out -o /tmp/test-artifacts/test-coverage.html
          no_output_timeout: 30m
      - run:
          command: |
            dates="$(date +%s)"
            mkdir -p /tmp/test-mir-interceptor/"$dates"
            [ -d "./itests/mir-interceptor/" ] && cp -R ./itests/mir-interceptor/* /tmp/test-mir-interceptor/"$dates"/ || echo "Mir Interceptor directory not found"
          when: on_fail
      - store_test_results:
          path: /tmp/test-reports
      - store_artifacts:
          path: /tmp/test-artifacts/<< parameters.suite >>.json
      - store_artifacts:
          path: /tmp/test-mir-interceptor
      - store_artifacts:
          path: /tmp/test-artifacts/test-coverage.html
      - store_artifacts:
          path: /tmp/conformance.out

  test-mir-smoke:
    <<: *basic_test

  test-ipc-basic:
    <<: *basic_test

  test-chain-unit:
    <<: *basic_test

  test-ipcagent-unit:
    <<: *basic_test

  test-mir-basic:
    <<: *basic_test

  test-mir-with-mangler:
    <<: *basic_test

  test-mir-reconfiguration:
    <<: *basic_test

  nightly-test-mir-basic:
    <<: *basic_test

  nightly-test-mir-with-mangler:
    <<: *basic_test

  nightly-test-mir-reconfiguration:
    <<: *basic_test

  e2etest: &e2e_test
    description: Run e2e tests.
    machine:
      image: ubuntu-2204:2023.02.1
      docker_layer_caching: true
    steps:
      - prepare
      - restore_cache:
          keys:
            - test-e2e-go-deps-{{ checksum "go.sum" }}
      - run:
          command: make deps lotus
          no_output_timeout: 30m
      - save_cache:
          key: test-e2e-go-deps-{{ checksum "go.sum" }}
          paths:
            - ~/.go_workspace/pkg/mod
            - ~/.cache/go-build
      - run:
          name: Install Docker Compose
          command: |
            sudo DEBIAN_FRONTEND=noninteractive apt-get update
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -y docker-compose-plugin
      - download-params
      - run:
          command: |
            cd e2e
            make test-ci
          no_output_timeout: 30m
      - run:
          command: |
            cd e2e
            dates="$(date +%s)"
            mkdir -p /tmp/e2e-artifacts/"$dates"
            [ -d "./testdata/_runtime/logs" ] && cp -R ./testdata/_runtime/logs/*.log /tmp/e2e-artifacts/"$dates" || echo "E2E logs directory not found"
          when: on_fail
      - store_artifacts:
          path: /tmp/e2e-artifacts

  nightly-e2e-test-mir-basic:
    <<: *e2e_test

  gofmt:
    executor: golang
    steps:
      - prepare
      - run:
          command: "! go fmt ./... 2>&1 | read"

  # FIXME: Consider including doc generation here when the code is stable.
  gen-check:
    executor: golang
    steps:
      - prepare
      - run: make deps
      - run: go install golang.org/x/tools/cmd/goimports
      - run: go install github.com/hannahhoward/cbor-gen-for
      - run: make type-gen

  lint: &lint
    description: |
      Run golangci-lint.
    parameters:
      executor:
        type: executor
        default: golang
      concurrency:
        type: string
        default: '2'
        description: |
          Concurrency used to run linters. Defaults to 2 because NumCPU is not
          aware of container CPU limits.
      args:
        type: string
        default: ''
        description: |
          Arguments to pass to golangci-lint
    executor: << parameters.executor >>
    steps:
      - prepare
      - run:
          command: make deps
          no_output_timeout: 30m
      - run:
          name: Lint
          command: |
            golangci-lint run -v --timeout 2m \
              --concurrency << parameters.concurrency >> << parameters.args >>
  lint-all:
    <<: *lint


workflows:
  version: 2.1
  ci:
    jobs:

      - nightly-e2e-test-mir-basic:
          name: e2e-mir-basic-tests


  nightly:
    triggers:
      - schedule:
          cron: "0 6 * * *"
          filters:
            branches:
              only:
                - spacenet
    jobs:
      - nightly-test-mir-with-mangler:
          name: nightly-mir-mangler-tests
          suite: consensus
          go-test-flags: "-tags=spacenet -count=1 -v -timeout=120m -run TestMirWithMangler"
          target: "./itests/mir_test.go"
      - nightly-test-mir-basic:
          name: nightly-mir-basic-tests
          suite: consensus
          go-test-flags: "-tags=spacenet -count=1 -v -timeout=20m -run TestMirBasic"
          target: "./itests/mir_test.go"
      - nightly-test-mir-reconfiguration:
          name: nightly-mir-reconfiguration-tests
          suite: consensus
          go-test-flags: "-tags=spacenet -count=1 -v -timeout=20m -run TestMirReconfiguration"
          target: "./itests/mir_test.go"
      - nightly-e2e-test-mir-basic:
          name: nightly-mir-e2e-basic-tests